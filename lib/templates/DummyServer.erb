/* generated by rpcoder <%= version %> */
using LitJson.Aiming;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace <%= name_space %>
{
	public partial class <%= api_class_name %>DummyServer : <%= api_class_name %>Interface
	{
		partial void Initialize();

		public <%= api_class_name %>DummyServer(<%= api_class_name %>Interface api)
		{
			_api = api;
			Initialize();
		}

		private <%= api_class_name %>Interface _api;

		public RpcoderErrorHandler ErrorHandler
		{
			get
			{
				return _api.ErrorHandler;
			}
			set
			{
				_api.ErrorHandler = value;
			}
		}

		public string BaseUrl
		{
			get
			{
				return _api.BaseUrl;
			}
			set
			{
				_api.BaseUrl = value;
			}
		}

		public Action<string> Logger
		{
			get
			{
				return _api.Logger;
			}
			set
			{
				_api.Logger = value;
			}
		}

		public event Action<JsonData> Responded;
		private void RaiseResponded(JsonData jsonData)
		{
			var d = Responded;
			if (d != null) d(jsonData);
		}

		public Func<string, string> CustomValidator { get; set; }

		public void AddCommonParameter(string key, string value)
		{
			_api.AddCommonParameter(key, value);
		}

		public string RemoveCommonParameter(string key)
		{
			return _api.RemoveCommonParameter(key);
		}

		public interface IDummyRequest<T>
		{
			Action<T> Success { get; set; }
			RpcoderErrorHandler Error { get; set; }
		}

		<%- functions.each do |func| -%>
		<%-
			response = func.name.camelize + "Response"
			successHandler = "Action<" + response + ">"
			request_query = func.params.map{|i| [i.query_type, i.name.to_s.camelize(false)].join(' ') }
			params_excluded_error_handler = request_query + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		public partial class <%= func.name.camelize %>Request : IDummyRequest<<%= response %>>
		{
			<%- func.params.each do |i| -%>
			public <%= i.query_type %> <%= i.name.to_s.camelize %> { get; set; }
			<%- end -%>
			public <%= successHandler %> Success { get; set; }
			public RpcoderErrorHandler Error { get; set; }
			public override string ToString()
			{
				<%- if func.params.empty? -%>
				return "{}";
				<%- else -%>
				<%= render_params_to_s(func.params, 4) %>
				<%- end -%>
			}
		}

		public Func<<%= func.name.camelize %>Request, IEnumerator> <%= func.name.camelize %>Logic { get; set; }

		public IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>)
		{
			return this.<%= func.name.camelize %>(<%= (func.params.map{|i| i.name.to_s.camelize(false) } + ['success']).join(', ') %>, null, null, null);
		}

		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>, Action throwIfCancelRequested, Action<float> reportProgress)
		{
			if(<%= func.name.camelize %>Logic != null)
			{
				return <%= func.name.camelize %>Logic(new <%= func.name.camelize %>Request(){
				<%- func.params.each do |i| -%>
					<%= i.name.to_s.camelize %> = <%= i.name.to_s.camelize(false) %>,
				<%- end -%>
					Success = x =>
					{
						On<%= func.name.camelize %>Responded(x);
						success(x);
					},
					Error = (error != null) ? error : ErrorHandler
					});
			}
			else
			{
				return _api.<%= func.name.camelize %>(
				<%- func.params.each do |i| -%>
					<%= i.name.to_s.camelize(false) %>,
				<%- end -%>
					success,
					(error != null) ? error : ErrorHandler,
					throwIfCancelRequested, reportProgress
					);
			}
		}

		partial void On<%= func.name.camelize %>Responded(<%= response %> response);

		<%- end -%>
	}
}
