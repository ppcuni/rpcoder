/* generated by rpcoder <%= version %> */
using LitJson.Aiming;
using System;
using System.Collections.Generic;
using System.Linq;

namespace <%= name_space %>
{
	public static partial class JsonExtensions
	{
		<%- if generate_primitive_to_json -%>
		public static JsonData ToJsonData(this int item)
		{
			return item;
		}

		public static string ToJson(this int item)
		{
			return item.ToString();
		}

		public static string ToJson(this int? item)
		{
			return item.HasValue ? item.Value.ToJson() : "null";
		}

		public static JsonData ToJsonData(this double item)
		{
			return item;
		}

		public static string ToJson(this double item)
		{
			return item.ToString();
		}

		public static string ToJson(this double? item)
		{
			return item.HasValue ? item.Value.ToJson() : "null";
		}

		public static JsonData ToJsonData(this string item)
		{
			return item;
		}

		public static string ToJson(this string item)
		{
			if (item == null) return "null";
			return "\"" + item + "\"";
		}

		public static JsonData ToJsonData(this bool item)
		{
			return item;
		}

		public static string ToJson(this bool item)
		{
			return item.ToString().ToLower();
		}

		public static string ToJson(this bool? item)
		{
			return item.HasValue ? item.Value.ToJson() : "null";
		}
		<%- end -%>

		public static JsonData ToJsonData<T>(this IEnumerable<T> list, Func<T, JsonData> decorator)
		{
			JsonData arrayData = new JsonData();
			var count = list.Count();
			if (count > 0)
			{
				foreach(var i in list)
				{
					if(decorator != null)
					{
						arrayData.Add(decorator(i));
					}
					else
					{
						arrayData.Add(i);
					}
				}
			}
			else
			{
				arrayData.Add(0);
				arrayData.Clear();
			}
			return arrayData;
		}

		public static string ToJson<T>(this IEnumerable<T> list)
		{
			return list.ToJson(x =>
			{
				var str = x.ToString();
				if(str == "True")
					return "true";
				else if(str == "False")
					return "false";
				else
					return str;
			});
		}

		public static string ToJson<T>(this IEnumerable<T[]> list)
		{
			return list.ToJson(x => x.ToJson());
		}

		public static string ToJson<T>(this IEnumerable<T[][]> list)
		{
			return list.ToJson(x => x.ToJson());
		}

		public static string ToJson<T>(this IEnumerable<T> list, Func<T, string> decorator)
		{
			if(list == null) return "null";
			return "[" + string.Join(",", list.Select(x => (x != null) ? decorator(x) : "null").ToArray()) + "]";
		}

		<%- enums.each do |enum| -%>
		public static string GetDescription(this <%= enum.name %> item)
		{
			switch(item)
			{
			<%- enum.constants.each do |constant| -%>
			case <%= enum.name %>.<%= constant.name.to_s.camelize %>:
				return @"<%= constant.description %>";
			<%- end -%>
			default:
				return string.Empty;
			}
		}

		public static JsonData ToJsonData(this <%= enum.name %> item)
		{
			return (int)item;
		}

		public static JsonData ToJsonData(this <%= enum.name %>? item)
		{
			return item.HasValue ? (int?)item : null;
		}

		public static string ToJson(this <%= enum.name %> item)
		{
			return ((int)item).ToJson();
		}

		public static string ToJson(this <%= enum.name %>? item)
		{
			return item.HasValue ? item.Value.ToJson() : "null";
		}


		public static JsonData ToJsonData(this IEnumerable<<%= enum.name %>> list)
		{
			return list.ToJsonData(x => (int)x);
		}

		public static JsonData ToJsonData(this IEnumerable<<%= enum.name %>?> list)
		{
			return list.ToJsonData(x => (int?)x);
		}

		public static string ToJson(this IEnumerable<<%= enum.name %>> list)
		{
			return list.ToJson(x => x.ToJson());
		}

		public static string ToJson(this IEnumerable<<%= enum.name %>?> list)
		{
			return list.ToJson(x => x.ToJson());
		}

		public static <%= enum.name %> Create(this JsonData jsonData, <%= enum.name %> dummy)
		{
			if(jsonData == null) return default(<%= enum.name %>);
			return (<%= enum.name %>)(int)jsonData;
		}

		public static <%= enum.name %>? Create(this JsonData jsonData, <%= enum.name %>? dummy)
		{
			return (<%= enum.name %>?)(int?)jsonData;
		}

		public static <%= enum.array %> Create(this JsonData jsonData, <%= enum.array %> dummy)
		{
			if(jsonData == null || !jsonData.IsArray) return null;
			<%- if enum.array_type == :array -%>
			var count = jsonData.Count;
			var createdList = new <%= enum.name %>[count];
			for(int i = 0; i < count; ++i)
			{
				createdList[i] = jsonData[i].Create(default(<%= enum.name %>));
			}
			<%- else -%>
			var createdList = new List<<%= enum.name %>>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(Create(jsonData[i], default(<%= enum.name %>)));
			}
			<%- end -%>

			return createdList;
		}

		public static <%= enum.array(:nullable) %> Create(this JsonData jsonData, <%= enum.array(:nullable) %> dummy)
		{
			if(jsonData == null || !jsonData.IsArray) return null;
			<%- if enum.array_type == :array -%>
			var count = jsonData.Count;
			var createdList = new <%= enum.name %>?[count];
			for(int i = 0; i < count; ++i)
			{
				createdList[i] = jsonData[i].Create(default(<%= enum.name %>?));
			}
			<%- else -%>
			var createdList = new List<<%= enum.name %>?>();
			for(int i = 0; i < jsonData.Count; ++i)
			{
				createdList.Add(Create(jsonData[i], default(<%= enum.name %>?)));
			}
			<%- end -%>

			return createdList;
		}

		<%- end -%>
	}
}
