/* generated by rpcoder <%= version %> */
using UnityEngine;
using LitJson.Aiming;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Aiming.IteratorTasks;

namespace <%= name_space %>
{
	public partial class <%= api_class_name %> : <%= api_class_name %>Interface, IResponseRaiser
	{
		public string BaseUrl { get; set; }
		public Action<string> Logger { get; set; }
		private void Log(string log)
		{
			if(Logger != null) Logger(log);
		}

		public event Action<JsonData> Responded;
		void IResponseRaiser.RaiseResponded(JsonData jsonData)
		{
			var d = Responded;
			if (d != null) d(jsonData);
		}

		public Func<string, string> CustomValidator { get; set; }
		private string Validate(string source)
		{
			var d = CustomValidator;
			if(d != null)
			{
				return CustomValidator(source);
			}
			else
			{
				return source;
			}
		}

		private Dictionary<string, string> commonParameterList = new Dictionary<string, string>();

		public void AddCommonParameter(string key, string value)
		{
			commonParameterList[key] = value;
		}

		public string RemoveCommonParameter(string key)
		{
			string returnValue = "";
			if (commonParameterList.ContainsKey(key))
			{
				returnValue = commonParameterList[key];
				commonParameterList.Remove(key);
			}
			return returnValue;
		}

		public string DefaultErrorMessage { get; set; }
		public RpcoderErrorHandler ErrorHandler { get; set; }

		public <%= api_class_name %>(string baseUrl)
		{
			BaseUrl = baseUrl;
			DefaultErrorMessage = "";
			JsonMapper.RegisterImporter<int, double?>((i) => (double?)i);
			JsonMapper.RegisterImporter<int, double>((i) => (double)i);
			JsonMapper.RegisterImporter<int, int?>((i) => (int?)i);
		}

		private string AddQueryDelimiter(string source)
		{
			if(source == "")
			{
				source += "?";
			}
			else
			{
				source += "&";
			}
			return source;
		}

		<%- functions.each do |func| -%>
		<%-
			response = func.name.camelize + "Response"
			successHandler = "Action<" + response + ">"
			params_excluded_error_handler = func.params.map{|i| [i.array_or_type, i.name.to_s.camelize(false)].join(' ') } + [successHandler + ' success']
			params = params_excluded_error_handler + ['RpcoderErrorHandler error']
		-%>
		/// <summary>
		/// <%= func.description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.camelize(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		public IEnumerator <%= func.name.camelize %>(<%= params_excluded_error_handler.join(', ') %>)
		{
			return this.<%= func.name.camelize %>(<%= (func.params.map{|i| i.name.to_s.camelize(false) } + ['success']).join(', ') %>, null, null, null);
		}

		/// <summary>
		/// <%= func.description %>
		/// </summary>
		<%- func.params.each do |param| -%>
		/// <param name="<%= param.name.to_s.camelize(false) %>"><%= param.options[:description] %></param>
		<%- end -%>
		public IEnumerator <%= func.name.camelize %>(<%= params.join(', ') %>, Action throwIfCancelRequested, Action<float> reportProgress)
		{
			string path = <%= func.path_parts.join(' + ') %>;
			<%- if func.is_get? -%>
			var args = new Dictionary<string, System.Object>();
			<%- else -%>
			var args = new JsonData();
			<%- end -%>

			<%- if func.has_query_params? -%>
			<%- func.query_params.each do |i| -%>
			<%- if i.optional? -%>
			if (<%= i.name.to_s.camelize(false) %> != null)
			<%- end -%>
			{
				<%- if not i.original_type? -%>
				args["<%= i.name.to_s %>"] = <%= i.name.to_s.camelize(false) %>.ToJsonData();
				<%- else -%>
					<%- if i.array? -%>
				args["<%= i.name.to_s %>"] = <%= i.name.to_s.camelize(false) %>.ToJsonData(null);
					<%- else -%>
				args["<%= i.name.to_s %>"] = <%= i.name.to_s.camelize(false) %>;
					<%- end -%>
				<%- end -%>
			}
			<%- end -%>
			<%- end -%>

			string text = null;
			string errorText = null;

			<%- if func.is_get? -%>
			var w = GetTextFromWww(this.BaseUrl + path, args, throwIfCancelRequested, reportProgress,
				x => text = x,
				x => errorText = x);
			<%- else -%>
			var w = PostTextFromWww(this.BaseUrl + path, args, throwIfCancelRequested, reportProgress,
				x => text = x,
				x => errorText = x);
			<%- end -%>

			foreach (var x in w) yield return x;

			if (error == null)
			{
				error = ErrorHandler;
			}

			if (errorText != null)
			{
				<%- if func.is_get? -%>
					error(RpcoderError.TIMEOUT, DefaultErrorMessage + (Debug.isDebugBuild ? "\n" + this.BaseUrl + path + "\n" + errorText : ""), null);
				<%- else -%>
					error(RpcoderError.TIMEOUT, DefaultErrorMessage + (Debug.isDebugBuild ? "\n" + this.BaseUrl + path + " " + args.ToJson() + "\n" + errorText : ""), null);
				<%- end -%>
			}
			else
			{
				ParseResponse("<%= func.name.camelize %>", text,
					jsonData => <%= response %>.Parse(jsonData),
					x =>
					{
						On<%= func.name.camelize %>Responded(x);
						success(x);
					},
					error);
			}
		}

		partial void On<%= func.name.camelize %>Responded(<%= response %> response);

		<%- end -%>

		private void ParseResponse<T>(string methodName, string jsonText, Func<JsonData, T> parser, Action<T> success, RpcoderErrorHandler error)
		{
			Log("{ \"key\": \"" + methodName + "\", \"respond\": " + jsonText + "}");
			try
			{
				var text = Validate(jsonText);
				JsonData jsonData = JsonMapper.ToObject(text);
				API.HandleDebugMessage(jsonData, Log);

				var hasError = API.HandleError(jsonData, error);

				if (!hasError)
				{
					success(parser(jsonData));
					((IResponseRaiser)this).RaiseResponded(jsonData);
				}
			}
			catch (JsonException)
			{
				error(RpcoderError.RESTART, "Json parse Error\n" + jsonText, null);
			}
		}

		private IEnumerable GetTextFromWww(string url, IDictionary<string, object> data, Action throwIfCancelRequested, Action<float> reportProgress, Action<string> success, Action<string> error)
		{
			foreach (string key in commonParameterList.Keys)
			{
				data[key] = commonParameterList[key];
			}

			string argsPath = string.Empty;
			foreach (var item in data)
			{
				argsPath = AddQueryDelimiter(argsPath);
				argsPath += WWW.EscapeURL(item.Key) + "=" + WWW.EscapeURL(item.Value.ToString());

			}

			string fullPath = url + argsPath;
			Log("request " + fullPath);

			using (var www = new WWW(fullPath))
			{
				bool canceled = false;
				while (!www.isDone && !canceled)
				{
					if (throwIfCancelRequested != null) throwIfCancelRequested();
					if (reportProgress != null) reportProgress(www.progress);
					yield return null;
				}

				if (www.error != null)
				{
					error(www.error);
				}
				else
				{
					success(www.text);
				}
			}
		}

		private IEnumerable PostTextFromWww(string url, JsonData data, Action throwIfCancelRequested, Action<float> reportProgress, Action<string> success, Action<string> error)
		{
			foreach (string key in commonParameterList.Keys)
			{
				data[key] = commonParameterList[key];
			}

			var json = data.ToJson();
			byte[] byteArray = Encoding.UTF8.GetBytes(json == String.Empty ? " " : json);
			Log("request " + url + " " + json);

			using (var www = new WWW(url, byteArray))
			{
				bool canceled = false;
				while (!www.isDone && !canceled)
				{
					if (throwIfCancelRequested != null) throwIfCancelRequested();
					if (reportProgress != null) reportProgress(www.progress);
					yield return null;
				}

				if (www.error != null)
				{
					error(www.error);
				}
				else
				{
					success(www.text);
				}
			}
		}

		public static bool HandleError(JsonData jsonData, RpcoderErrorHandler error)
		{
			JsonData errorJsonData;

			if (!jsonData.TryGetValue("rpcoderError", out errorJsonData))
				return false;

			JsonData errorTypeJson;

			if(!errorJsonData.TryGetValue("errorType", out errorTypeJson))
				return false;

			string errorType = (string)errorTypeJson;

			string message = "";
			JsonData messageJson;
			if (errorJsonData.TryGetValue("message", out messageJson))
			{
				message = (string)messageJson;
			}
			JsonData targetSceneJson;
			string targetScene = null;
			if (errorJsonData.TryGetValue("targetScene", out targetSceneJson))
			{
				targetScene = (string)targetSceneJson;
			}
			error(errorType, message, targetScene);
			return true;
		}

		public static void HandleDebugMessage(JsonData jsonData, Action<string> logger)
		{
			JsonData message;
			if(jsonData.TryGetValue("debugMessage", out message))
			{
				logger((string)message);
			}
		}
	}
}
