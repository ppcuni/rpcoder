/* generated by rpcoder <%= version %> */

namespace <%= name_space %>
{
	using LitJson.Aiming;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Linq;

	<%- functions.each do |func| -%>
	<%-
		response_name = func.name.camelize + "Response"
	-%>
	public partial class <%= response_name %>
	{
		<%- func.return_types.each do |i| -%>
		public <%= i.array_or_type %> <%= i.name.to_s.camelize %> { get; set; }
		<%- end -%>

		public override string ToString()
		{
			<%- if func.return_types.empty? -%>
			return "{}";
			<%- else -%>
			<%= render_params_to_s(func.return_types, 3) %>
			<%- end -%>
		}

		public static <%= response_name %> Parse(string json)
		{
			return Parse(JsonMapper.ToObject(json));
		}

		public static <%= response_name %> Parse(JsonData jsonData)
		{
			return jsonData.Create(default(<%= response_name %>));
		}
	}

	<%- end -%>

	public static partial class JsonExtensions
	{
		<%- functions.each do |func| -%>
		<%-
			response_name = func.name.camelize + "Response"
		-%>
		public static string ToJson(this <%= response_name %> item)
		{
			return (item != null) ?  item.ToString() : "null";
		}

		public static <%= response_name %> Create(this JsonData jsonData, <%= response_name %> dummy)
		{
			if(jsonData == null || !jsonData.IsObject) return null;
			<%-
				args = []
				if func.has_return_type?
					args = func.return_types.map {|param|
						if not param.original_type?
							param.name.to_s.camelize + " = jsonData.GetValueOrDefault(\"#{param.name}\").Create(default(#{param.array_or_type}))"
						else
							if param.array?
								param.name.to_s.camelize + " = jsonData.ContainsKey(\"#{param.name}\") ? JsonMapper.ToObject<#{param.array_or_type}>(jsonData[\"#{param.name}\"].ToJson()) : null"
							else
								param.name.to_s.camelize + " = (#{param.array_or_type})jsonData.GetValueOrDefault(\"#{param.name}\")"
							end
						end
					}
				end
			-%>
			return new <%= response_name %>(){<%= args.join(",\n\t\t\t\t\t\t\t") %>};
		}
		<%- end -%>
	}

	public class RpcoderError
	{
		public const string RESTART	= "RESTART";
		public const string RETENTION	= "RETENTION";
		public const string TRANSITION	= "TRANSITION";
		public const string RELOAD	= "RELOAD";
		public const string UPDATE	= "UPDATE";
		public const string TIMEOUT	= "TIMEOUT";
		public const string SESSION_TIMEOUT	= "SESSION_TIMEOUT";

		public string ErrorType { get; private set; }
		public string Message { get; private set; }
		public string TargetScene { get; private set; }

		public RpcoderError(string errorType, string message, string targetScene)
		{
			ErrorType = errorType;
			Message = message;
			TargetScene = targetScene;
		}
	}
}
